'use client'

import Spending from '@/app/_components/Spending'
import Button from '@/app/system/_components/Button'
import PageLayout from '@/app/_components/PageLayout'
import SectionCard from '@/app/_components/SectionCard'
import SearchInput from '@/app/system/_components/SearchInput'
import { useRouter } from 'next/navigation'
import React, { useEffect, useState } from 'react'

export default function ToDoList() {
    const [todos, setTodos] = useState([
        'UI Ïª¥Ìè¨ÎÑåÌä∏ ÎùºÏù¥Î∏åÎü¨Î¶¨ Íµ¨Ï∂ï',
        'ÎîîÏûêÏù∏ ÏãúÏä§ÌÖú Î¨∏ÏÑúÌôî',
        'Í≥µÌÜµ Ìï®Ïàò Î∞è Ïú†Ìã∏Î¶¨Ìã∞ ÏûëÏÑ±',
        'ÏÉÅÏàò ÌååÏùº Ï†ïÎ¶¨ Î∞è Í¥ÄÎ¶¨',
        'API Ïó∞Îèô Î°úÏßÅ Íµ¨ÌòÑ'
    ])
    const [newTodo, setNewTodo] = useState('')
    const [filter, setFilter] = useState('')
    
    const router = useRouter()

    const addTodo = () => {
        if (newTodo.trim()) {
            setTodos(prev => [...prev, newTodo.trim()])
            setNewTodo('')
        }
    }

    const deleteTodo = (idx: number) => {
        setTodos(prev => prev.filter((_, i) => i !== idx))
    }

    const filteredTodos = todos.filter(todo => 
        todo.toLowerCase().includes(filter.toLowerCase())
    )

    const handleSearch = (query: string) => {
        setFilter(query)
    }

    useEffect(() => {
        return () => {}
    }, [todos])

    return (
        <PageLayout
            title="üìù Todo Manager"
            description="Ìï† ÏùºÏùÑ Ìö®Ïú®Ï†ÅÏúºÎ°ú Í¥ÄÎ¶¨ÌïòÍ≥† Ï∂îÏ†ÅÌï† Ïàò ÏûàÎäî ÏãúÏä§ÌÖúÏûÖÎãàÎã§."
        >
            <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
                
                {/* Todo ÏûÖÎ†• ÏÑπÏÖò */}
                <SectionCard 
                    title="ÏÉà Ìï† Ïùº Ï∂îÍ∞Ä" 
                    description="ÏÉàÎ°úÏö¥ ÏûëÏóÖÏùÑ Ï∂îÍ∞ÄÌïòÏÑ∏Ïöî"
                    className="lg:col-span-1"
                >
                    <div className="space-y-4">
                        <input
                            type="text"
                            value={newTodo}
                            onChange={(e) => setNewTodo(e.target.value)}
                            placeholder="ÏÉà Ìï† ÏùºÏùÑ ÏûÖÎ†•ÌïòÏÑ∏Ïöî..."
                            className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 outline-none"
                            onKeyPress={(e) => e.key === 'Enter' && addTodo()}
                        />
                        <Button
                            label="Ï∂îÍ∞ÄÌïòÍ∏∞"
                            variant="primary"
                            onClick={addTodo}
                            className="w-full"
                        />
                    </div>
                </SectionCard>

                {/* Todo Î™©Î°ù ÏÑπÏÖò */}
                <SectionCard 
                    title="Ìï† Ïùº Î™©Î°ù" 
                    description={`Ï¥ù ${filteredTodos.length}Í∞úÏùò Ìï† ÏùºÏù¥ ÏûàÏäµÎãàÎã§`}
                    className="lg:col-span-2"
                >
                    <div className="space-y-4">
                        <SearchInput
                            onSearch={handleSearch}
                            placeholder="Ìï† Ïùº Í≤ÄÏÉâ..."
                        />
                        
                        <div className="space-y-3 max-h-96 overflow-y-auto">
                            {filteredTodos.length === 0 ? (
                                <div className="text-center py-8 text-gray-500">
                                    {filter ? 'Í≤ÄÏÉâ Í≤∞Í≥ºÍ∞Ä ÏóÜÏäµÎãàÎã§.' : 'Ìï† ÏùºÏù¥ ÏóÜÏäµÎãàÎã§. ÏÉàÎ°úÏö¥ ÏûëÏóÖÏùÑ Ï∂îÍ∞ÄÌï¥Î≥¥ÏÑ∏Ïöî!'}
                                </div>
                            ) : (
                                filteredTodos.map((todo, idx) => (
                                    <div 
                                        key={`${todo}-${idx}`}
                                        className="flex items-center justify-between p-4 bg-gray-50 rounded-lg border border-gray-200 hover:bg-gray-100 transition-colors"
                                    >
                                        <div className="flex items-center space-x-3">
                                            <div className="w-2 h-2 bg-blue-500 rounded-full"></div>
                                            <span className="text-gray-800">{todo}</span>
                                        </div>
                                        <Button
                                            label="ÏôÑÎ£å"
                                            variant="danger"
                                            onClick={() => deleteTodo(idx)}
                                            className="text-sm px-3 py-1"
                                        />
                                    </div>
                                ))
                            )}
                        </div>
                    </div>
                </SectionCard>
            </div>

            {/* Ï∂îÍ∞Ä Í∏∞Îä• ÏÑπÏÖò */}
            <div className="mt-8 grid grid-cols-1 md:grid-cols-2 gap-6">
                <SectionCard 
                    title="ÏßÄÏ∂ú Í¥ÄÎ¶¨" 
                    description="Ìï† ÏùºÍ≥º Í¥ÄÎ†®Îêú ÏßÄÏ∂úÏùÑ Ï∂îÏ†ÅÌïòÏÑ∏Ïöî"
                >
                    <Spending />
                </SectionCard>

                <SectionCard 
                    title="Îπ†Î•∏ Ïù¥Îèô" 
                    description="Îã§Î•∏ ÏÑπÏÖòÏúºÎ°ú Ïù¥ÎèôÌïòÏÑ∏Ïöî"
                >
                    <div className="flex flex-wrap gap-3">
                        <Button
                            label="ÏãúÏä§ÌÖú Ïª¥Ìè¨ÎÑåÌä∏"
                            variant="secondary"
                            onClick={() => router.push('/system')}
                        />
                        <Button
                            label="ÌôàÏúºÎ°ú"
                            variant="secondary"
                            onClick={() => router.push('/')}
                        />
                        <Button
                            label="ÏóêÎîîÌÑ∞"
                            variant="secondary"
                            onClick={() => router.push('/editor')}
                        />
                    </div>
                </SectionCard>
            </div>

            {/* ÌÜµÍ≥Ñ Ï†ïÎ≥¥ */}
            <div className="mt-8">
                <SectionCard 
                    title="ÌÜµÍ≥Ñ" 
                    description="ÌòÑÏû¨ ÏÉÅÌÉú ÏöîÏïΩ"
                >
                    <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                        <div className="text-center p-4 bg-blue-50 rounded-lg">
                            <div className="text-2xl font-bold text-blue-600">{todos.length}</div>
                            <div className="text-sm text-blue-800">Ï†ÑÏ≤¥ Ìï† Ïùº</div>
                        </div>
                        <div className="text-center p-4 bg-green-50 rounded-lg">
                            <div className="text-2xl font-bold text-green-600">{filteredTodos.length}</div>
                            <div className="text-sm text-green-800">Í≤ÄÏÉâ Í≤∞Í≥º</div>
                        </div>
                        <div className="text-center p-4 bg-purple-50 rounded-lg">
                            <div className="text-2xl font-bold text-purple-600">
                                {todos.length > 0 ? Math.round((filteredTodos.length / todos.length) * 100) : 0}%
                            </div>
                            <div className="text-sm text-purple-800">Îß§Ïπ≠Î•†</div>
                        </div>
                    </div>
                </SectionCard>
            </div>
        </PageLayout>
    )
}
